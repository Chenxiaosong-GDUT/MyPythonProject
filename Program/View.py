# -*- coding: utf-8 -*-
# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# from matplotlib.backends.backend_qt5 import NavigationToolbar2QT as NavigationToolbar
# from PyQt5.QtWidgets import QWidget
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as  NavigationToolbar
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from Program.DataModel import Model
from Algorithm.PathPlanning import Path_Planning

from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.animation import FuncAnimation
from matplotlib.figure import Figure
import matplotlib.colors as mcolors
import matplotlib.pyplot as plt
from datetime import datetime
import numpy as np
import networkx as nx
import matplotlib
import time
matplotlib.use("Qt5Agg")  # 声明使用QT5
#继承自FigureCanvas的类  嵌入PYQT5窗口中的地图的画布
class graph_FigureCanvas(FigureCanvas):
    def __init__(self,floor = None,title = None, parent=None, width=15, height=5, dpi=100):
        self.floor = floor
        self.title = title
        #第一步：创建一个创建Figure
        self.fig = Figure(figsize=(width, height), dpi=dpi)# 创建图形对象并配置其参数

        #第二步：在父类中激活Figure窗口
        super(graph_FigureCanvas, self).__init__(self.fig)# 初始化父类
        # self.fig.patch.set_facecolor('#01386a')  # 设置绘图区域颜色
        if 'members' in self.floor.graph:
            floors = self.floor.graph['members']
            # self.fig, self.axs = plt.subplots(1, len(floors), figsize=(15, 5))
            self.axs = self.fig.subplots(1, len(floors))
            self.ax_list =  self.axs.tolist()  # 将 numpy 数组转换为列表
        else:
            #     #第三步：创建一个子图，用于绘制图形用，111表示子图编号，如matlab的subplot(1,1,1)
            self.ax = self.fig.add_subplot(111)# 添加子图到图形中
            # self.ax.spines['bottom'].set_position(('data', 0))  # 设置x轴线再Y轴0位置
            # self.ax.spines['left'].set_position(('data',0))  # 设置y轴在x轴0位置
            # self.ax.spines['top'].set_visible(False)  # 去掉上边框
            # self.ax.spines['right'].set_visible(False)  # 去掉右边框
            # self.ax.spines['bottom'].set_visible(False)  # 去掉下边框
            # self.ax.patch.set_facecolor("#01386a")  # 设置ax区域背景颜色
        self.setParent(parent) # 设置父窗口
        self.setSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)# 设置大小策略为可扩展
        self.updateGeometry()# 更新几何形状
        self.fig.tight_layout()# 调整子图的布局

        # 定义退出标志
        self.is_running = True
        self.connect_event()  # 连接事件
        self.highlighted_node = None  # 高亮的节点


    def connect_event(self):
        self.cid1 = self.fig.canvas.mpl_connect('button_press_event', self.on_mouse_press)  # 鼠标左键按下
        # self.mpl_connect('button_release_event', self.on_mouse_release)  # 鼠标左键释放
        # self.mpl_connect('motion_notify_event', self.on_mouse_move)  # 鼠标移动
        # self.mpl_connect("scroll_event", self.on_mouse_wheel)	#鼠标滚动事件
        self.cid2 =self.fig.canvas.mpl_connect('key_press_event', self.on_key_press)  # 键盘按下

    #重写keyPressEvent()
    def keyPressEvent(self, event):
        key = event.key()
        print(f"keyPressEvent: {key}")
        if key == Qt.Key_Enter:
            self.keyPressEvent.emit('Enter')
        elif key == Qt.Key_Escape:
            self.keyPressEvent.emit('Escape')
        else:
            self.keyPressEvent.emit('')

    # 键盘按下事件
    def on_key_press(self, event):
        print(f"on_key_press: {event.key}")
        # if event.key == 'escape':
        #     self.is_running = False
        # elif event.key == 'enter':
        #     self.is_running = True

    # 鼠标左键按下高亮显示节点
    def on_mouse_press(self, event):
        if event.button == 1:  # 鼠标左键
            click_x, click_y = event.xdata, event.ydata  # 获取鼠标点击的坐标
            if click_x is None or click_y is None:
                return
            # 设置一个阈值，用于确定点击坐标与节点坐标之间的“接近度”
            threshold = 0.5
            clicked_node = None
            # 获取节点位置
            location = nx.get_node_attributes(self.floor, 'location')
            colors = nx.get_node_attributes(self.floor, 'node_colors')
            # 遍历节点位置字典
            for node, (x, y) in location.items():
                delta_x = abs(x - click_x)
                delta_y = abs(y - click_y)
                if delta_x < threshold and delta_y < threshold:
                    clicked_node = node
                    break
            if clicked_node == self.highlighted_node:  # 如果点击的节点和之前高亮的节点相同，则取消高亮
                print("选中节点与上一次相同！")
                return
            # 如果之前有高亮的节点，复原
            if self.highlighted_node is not None:
                print(f"1.复位前一次高亮的节点: {self.highlighted_node}")
                x_old, y_old = location[self.highlighted_node]
                self.ax.scatter(x_old, y_old, color=colors[self.highlighted_node], marker='o',edgecolors='black',linewidths=0.7,zorder=2)  # 恢复之前节点的颜色和大小
            self.draw()  ## 更新绘图
            # 高亮当前点击的节点
            if clicked_node is not None:
                self.highlighted_node = clicked_node
                x, y = location[clicked_node]
                print(f"2.本次点击的节点: {clicked_node}, 坐标: ({x}, {y})")
                self.ax.scatter(x, y, c='red', marker='o', edgecolors='black', linewidths=0.7, zorder=2)
                self.draw()  ## 更新绘图
            else:# 如果没有点击到节点，重置高亮节点
                self.highlighted_node = None
                self.draw()  ## 更新绘图

    #重置地图画布
    def reset_canvas(self):
        self.ax.cla()           # 清理绘图区
        # self.figure.clf()       # 清理画布，清理画布后必须重新添加绘图区
        self.draw_floor()
        self.fig.canvas.draw()  # 画布重绘
        self.fig.canvas.flush_events()  # 刷新事件


    '''显示搜索过程'''
    def show_visited_process(self,graph,explored,delay=0.01):
        if graph is None or explored is None:
            return
        # colors = nx.get_node_attributes(graph, 'node_colors')
        locations = [graph.nodes[node]['location'] for node in explored]  # 获取所有位置
        # original_colors = self.scatter_collection.get_facecolors()
        # node_list = list(graph.nodes())
        # gray_value = mcolors.to_rgba('gray')    # 灰色的 RGBA 值
        # for node in explored:
        #     # start_time = time.time()
        #     if not self.is_running:
        #         print("*** Escape key pressed,show_visited_process --> stopping animation")
        #         break  # 按下 Escape 键后终止
        #     node_index = node_list.index(node)  # 获取 node 在节点列表中的索引
        #     original_colors[node_index] = gray_value  # 更新颜色
        #     self.scatter_collection.set_facecolor(original_colors)
        #     # self.fig.canvas.draw()  # 重绘图形
        #     self.fig.canvas.draw_idle()  # 画布渲染
        #     self.fig.canvas.flush_events()  # 刷新事件
            # print(f"已走过{node}，耗时{time.time()-start_time}秒") #0.25秒左右浮动，越来越慢
        explored_x = [loc[0] for loc in locations]  # 提取 x 坐标
        explored_y = [loc[1] for loc in locations]  # 提取 y 坐标

        self.ax.scatter(explored_x, explored_y, color='cyan',marker='o',edgecolors='black',  linewidth=0.7, zorder=2)  # 只画出路径点


    #高亮显示路径
    def show_path(self,graph, path,algorithm_index):
        try:
            if  graph is None or path is None:
                raise Exception("graph or path is None")
            locations = [graph.nodes[node]['location'] for node in path]  # 获取所有位置
            path_x = [loc[0] for loc in locations]  # 提取 x 坐标
            path_y = [loc[1] for loc in locations]  # 提取 y 坐标
            color = 'gray'
            if algorithm_index == 0:#dijkstra算法
                color = 'blue'
            elif algorithm_index == 1:#A*算法
                color = 'green'
            elif algorithm_index == 2:# 双向Dijkstra
                color = 'purple'
            elif algorithm_index == 3:#贝尔曼-福特
                color = 'red'
            elif algorithm_index == 4:#改进的A*算法
                color = 'orange'
                # color = 'pink'
                # color = 'brown'
                # color = 'cyan'

            # self.ax.scatter(path_x, path_y, color=color,marker='o',edgecolors='black',  linewidth=0.7, zorder=2)  # 只画出路径点
            self.ax.plot(path_x, path_y, color=color, marker='o', linewidth=0.7, zorder=2)  # 画出路径的边和点
            self.draw()  # 更新绘图
        except Exception as e:
            print(f"show_path error: {e}")

    # 鼠标左键释放
    # def on_mouse_release(self, event):
    #     pass
    #     # if event.button == 1:  # 鼠标左键
    #     #     self.lef_mouse_pressed = False
    #     #     print(f"on_mouse_release鼠标位置: ({event.x}, {event.y})")
    # # 鼠标移动
    # def on_mouse_move(self, event):
    #     pass
    # # 鼠标滚动事件
    # def on_mouse_wheel(self, event):
    #     pass
    #     # # 鼠标滚动事件
    #     # if event.button == 'up':
    #     #     print(f"on_mouse_wheel鼠标滚动: 放大")
    #     #     # self.ax.set_xlim(self.ax.get_xlim() * 1.1)
    #     #     # self.ax.set_ylim(self.ax.get_ylim() * 1.1)
    #     # elif event.button == 'down':
    #     #     print(f"on_mouse_wheel鼠标滚动: 缩小")
    #     #     # self.ax.set_xlim(self.ax.get_xlim() * 0.9)
    #     #     # self.ax.set_ylim(self.ax.get_ylim() * 0.9)
    #     # self.draw()  # 重绘图形

    #单层地图绘制
    def draw_floor(self):
        start_time = time.time()
        if 'members' in self.floor.graph:
            members = self.floor.graph['members']
            # self.draw_floors(members, [f"Floor {i}" for i in range(1, len(members)+1)])
            # start_time = time.time()
            # 绘制每个子图
            for ax, graph, title in zip(self.ax_list, members, [f"Floor {i}" for i in range(1, len(members)+1)]):
                # 获取节点位置和颜色
                colors = nx.get_node_attributes(graph, 'node_colors')
                location = nx.get_node_attributes(graph, 'location')
                pos = nx.get_node_attributes(graph, 'pos')
                # 提取 X, Y 画布坐标
                x = [loc[0] for loc in location.values()]
                y = [loc[1] for loc in location.values()]
                ax.set_title(title)
                # 绘制边
                for edge in graph.edges():
                    x_edges = [location[edge[0]][0], location[edge[1]][0]]
                    y_edges = [location[edge[0]][1], location[edge[1]][1]]
                    ax.plot(x_edges, y_edges, c='gray',zorder=1)
                ax.scatter(x, y, c=[colors[node] for node in graph.nodes()], marker='o',edgecolors='black',linewidths=0.7,zorder=1)
                ax.set_xlabel('排 坐标')
                ax.set_ylabel('列 坐标')

            self.fig.tight_layout()#调整子图间距
            self.draw()#更新绘图内容
            end_time = time.time()
            print(f"绘制全景地图耗时：{end_time-start_time}秒")
        else:
            # 获取节点位置和颜色
            pos = nx.get_node_attributes(self.floor, 'pos')
            colors = nx.get_node_attributes(self.floor, 'node_colors')
            location = nx.get_node_attributes(self.floor, 'location')
            # 提取 X, Y 画布坐标
            x, y = zip(*location.values())
            # x = [loc[0] for loc in location.values()]
            # y = [loc[1] for loc in location.values()]
            self.ax.set_title(self.title)
            # # 绘制边
            for edge in self.floor.edges():
                x_edges = [location[edge[0]][0], location[edge[1]][0]]
                y_edges = [location[edge[0]][1], location[edge[1]][1]]
                self.ax.plot(x_edges, y_edges, c='gray',zorder=1)

                # 获取边的权重值（假设可以通过 edge_weight 方法获取）
                # edge_weight = self.floor.edges[edge]['weight']  # 直接获取权重值
                # self.ax.text((x_edges[0] + x_edges[1]) / 2, (y_edges[0] + y_edges[1]) / 2, edge_weight, ha='center',
                #              va='center',
                #              color='black',
                #              zorder=2)
            # 绘制散点
            #self.scatter_collection包含了散点图的所有信息，包括颜色、标记、边缘颜色等。
            self.scatter_collection = self.ax.scatter(x, y, c=[colors[node] for node in self.floor.nodes()], marker='o',edgecolors='black',linewidths=0.7,zorder=1)
            # self.scatter_collection.set_facecolor(colors.values())      #重置地图时需要set_facecolor

            self.ax.set_xlabel('排 坐标')
            self.ax.set_ylabel('列 坐标')
            plt.tight_layout()#调整子图间距
            self.draw()#更新绘图内容
            end_time = time.time()
            print(f"绘制{self.title}地图耗时：{end_time-start_time}秒")

    # def draw_floors(self, floors, titles):#绘制多个地图
    #     start_time = time.time()
    #     # 创建多个子图
    #     # self.fig, self.axs = self.fig.subplots(1, len(floors), figsize=(15, 5))
    #     # self.axs = self.fig.subplots(1, len(floors))
    #     # 绘制每个子图
    #     for ax, graph, title in zip(self.axs, floors, titles):
    #         # 获取节点位置和颜色
    #         pos = nx.get_node_attributes(graph, 'pos')
    #         colors = nx.get_node_attributes(graph, 'node_colors')
    #         location = nx.get_node_attributes(graph, 'location')
    #         # 提取 X, Y 画布坐标
    #         x = [loc[0] for loc in location.values()]
    #         y = [loc[1] for loc in location.values()]
    #         ax.set_title(title)
    #         # 绘制边
    #         for edge in graph.edges():
    #             x_edges = [location[edge[0]][0], location[edge[1]][0]]
    #             y_edges = [location[edge[0]][1], location[edge[1]][1]]
    #             ax.plot(x_edges, y_edges, c='gray',zorder=1)
    #         ax.scatter(x, y, c=[colors[node] for node in graph.nodes()], marker='o',edgecolors='black',linewidths=0.7,zorder=1)
    #         ax.set_xlabel('排 坐标')
    #         ax.set_ylabel('列 坐标')
    #
    #     self.fig.tight_layout()#调整子图间距
    #     self.draw()#更新绘图内容
    #     end_time = time.time()
    #     print(f"绘制全景地图耗时：{end_time-start_time}秒")

class Ui_MainWindow(object):
    def __init__(self):
        #读取数据
        self.model = Model();
        self.maps = [self.model.floor1, self.model.floor2, self.model.floor3,self.model.combined_graph]
        #创建画布
        self.first_floor_canvas = graph_FigureCanvas(floor=self.maps[0], title="First Floor")
        self.second_floor_canvas = graph_FigureCanvas(floor=self.maps[1], title="Second Floor")
        self.third_floor_canvas = graph_FigureCanvas(floor=self.maps[2], title="Third Floor")
        self.combined_floor_canvas = graph_FigureCanvas(floor=self.maps[3], title="Combined_graph")
        #画布集合
        self.floor_Canvas_list = [self.first_floor_canvas, self.second_floor_canvas, self.third_floor_canvas, self.combined_floor_canvas]
        #寻路算法
        self.path_planing = Path_Planning(self.floor_Canvas_list)


        # MainWindow.setMinimumHeight(900)
        # MainWindow.setMinimumWidth(1500)
        # MainWindow.showMaximized()
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setMinimumHeight(900)
        MainWindow.setMinimumWidth(1500)
        MainWindow.showMaximized()

        self.centralwidget = QtWidgets.QWidget(MainWindow)

        font = QtGui.QFont()
        font.setPointSize(12)
        self.centralwidget.setFont(font)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setContentsMargins(0, 3, 0, 0)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setAutoFillBackground(True)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setTabsClosable(False)
        self.tabWidget.setMovable(True)
        self.tabWidget.setTabBarAutoHide(False)
        self.tabWidget.setObjectName("tabWidget")
        self.first_floor = QtWidgets.QWidget()
        font = QtGui.QFont()
        font.setPointSize(11)
        self.first_floor.setFont(font)
        self.first_floor.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.first_floor.setObjectName("first_floor")
        self.tabWidget.addTab(self.first_floor, "")
        self.second_floor = QtWidgets.QWidget()
        self.second_floor.setObjectName("second_floor")
        self.tabWidget.addTab(self.second_floor, "")
        self.third_floor = QtWidgets.QWidget()
        self.third_floor.setAccessibleName("")
        self.third_floor.setObjectName("third_floor")
        self.tabWidget.addTab(self.third_floor, "")
        self.allMaps = QtWidgets.QWidget()
        self.allMaps.setObjectName("allMaps")
        self.tabWidget.addTab(self.allMaps, "")
        self.horizontalLayout.addWidget(self.tabWidget)
        self.Right_frame = QtWidgets.QFrame(self.centralwidget)
        self.Right_frame.setObjectName("Right_frame")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.Right_frame)
        self.verticalLayout.setObjectName("verticalLayout")
        self.AGV_groupBox = QtWidgets.QGroupBox(self.Right_frame)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.AGV_groupBox.setFont(font)
        self.AGV_groupBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.AGV_groupBox.setAutoFillBackground(False)
        self.AGV_groupBox.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.AGV_groupBox.setObjectName("AGV_groupBox")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.AGV_groupBox)
        self.verticalLayout_2.setContentsMargins(0, 0, -1, 0)
        self.verticalLayout_2.setSpacing(10)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.AddAGV_gridLayout = QtWidgets.QGridLayout()
        self.AddAGV_gridLayout.setContentsMargins(-1, 9, -1, -1)
        self.AddAGV_gridLayout.setObjectName("AddAGV_gridLayout")
        self.AGV_ID = QtWidgets.QLabel(self.AGV_groupBox)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.AGV_ID.setFont(font)
        self.AGV_ID.setAlignment(QtCore.Qt.AlignCenter)
        self.AGV_ID.setObjectName("AGV_ID")
        self.AddAGV_gridLayout.addWidget(self.AGV_ID, 1, 0, 1, 1)
        self.random_addAGV = QtWidgets.QPushButton(self.AGV_groupBox)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.random_addAGV.setFont(font)
        self.random_addAGV.setObjectName("random_addAGV")
        self.AddAGV_gridLayout.addWidget(self.random_addAGV, 0, 0, 1, 2)
        self.AGV_location = QtWidgets.QLabel(self.AGV_groupBox)
        font = QtGui.QFont()
        font.setPointSize(11)
        font.setBold(False)
        font.setWeight(50)
        self.AGV_location.setFont(font)
        self.AGV_location.setAlignment(QtCore.Qt.AlignCenter)
        self.AGV_location.setObjectName("AGV_location")
        self.AddAGV_gridLayout.addWidget(self.AGV_location, 2, 0, 1, 1)
        self.AGV_ID_comboBox = QtWidgets.QSpinBox(self.AGV_groupBox)
        self.AGV_ID_comboBox.setMinimumSize(QtCore.QSize(0, 20))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.AGV_ID_comboBox.setFont(font)
        self.AGV_ID_comboBox.setAlignment(QtCore.Qt.AlignCenter)
        self.AGV_ID_comboBox.setMaximum(10000)
        self.AGV_ID_comboBox.setObjectName("AGV_ID_comboBox")
        self.AddAGV_gridLayout.addWidget(self.AGV_ID_comboBox, 1, 1, 1, 1)
        self.AGV_location_comboBox = QtWidgets.QSpinBox(self.AGV_groupBox)
        self.AGV_location_comboBox.setMinimumSize(QtCore.QSize(0, 20))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(False)
        font.setWeight(50)
        self.AGV_location_comboBox.setFont(font)
        self.AGV_location_comboBox.setAlignment(QtCore.Qt.AlignCenter)
        self.AGV_location_comboBox.setMaximum(10000)
        self.AGV_location_comboBox.setObjectName("AGV_location_comboBox")
        self.AddAGV_gridLayout.addWidget(self.AGV_location_comboBox, 2, 1, 1, 1)
        self.addAGV = QtWidgets.QPushButton(self.AGV_groupBox)
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(False)
        font.setWeight(50)
        self.addAGV.setFont(font)
        self.addAGV.setObjectName("addAGV")
        self.AddAGV_gridLayout.addWidget(self.addAGV, 3, 0, 1, 2)
        self.verticalLayout_2.addLayout(self.AddAGV_gridLayout)
        self.verticalLayout.addWidget(self.AGV_groupBox)
        self.Task_groupBox = QtWidgets.QGroupBox(self.Right_frame)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.Task_groupBox.setFont(font)
        self.Task_groupBox.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft)
        self.Task_groupBox.setObjectName("Task_groupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.Task_groupBox)
        self.verticalLayout_3.setContentsMargins(0, 0, 9, 0)
        self.verticalLayout_3.setSpacing(10)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.Task_gridLayout = QtWidgets.QGridLayout()
        self.Task_gridLayout.setObjectName("Task_gridLayout")
        self.start_spinBox = QtWidgets.QSpinBox(self.Task_groupBox)
        self.start_spinBox.setMinimumSize(QtCore.QSize(0, 20))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.start_spinBox.setFont(font)
        self.start_spinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.start_spinBox.setMaximum(10000)
        self.start_spinBox.setObjectName("start_spinBox")
        self.Task_gridLayout.addWidget(self.start_spinBox, 2, 1, 1, 1)
        self.end_spinBox = QtWidgets.QSpinBox(self.Task_groupBox)
        self.end_spinBox.setMinimumSize(QtCore.QSize(0, 20))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.end_spinBox.setFont(font)
        self.end_spinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.end_spinBox.setMaximum(10000)
        self.end_spinBox.setObjectName("end_spinBox")
        self.Task_gridLayout.addWidget(self.end_spinBox, 3, 1, 1, 1)
        self.end_label = QtWidgets.QLabel(self.Task_groupBox)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.end_label.setFont(font)
        self.end_label.setAlignment(QtCore.Qt.AlignCenter)
        self.end_label.setObjectName("end_label")
        self.Task_gridLayout.addWidget(self.end_label, 3, 0, 1, 1)
        self.random_AddTask = QtWidgets.QPushButton(self.Task_groupBox)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.random_AddTask.setFont(font)
        self.random_AddTask.setObjectName("random_AddTask")
        self.Task_gridLayout.addWidget(self.random_AddTask, 1, 0, 1, 2)
        self.addTask = QtWidgets.QPushButton(self.Task_groupBox)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.addTask.setFont(font)
        self.addTask.setObjectName("addTask")
        self.Task_gridLayout.addWidget(self.addTask, 5, 0, 1, 2)
        self.start_label = QtWidgets.QLabel(self.Task_groupBox)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.start_label.setFont(font)
        self.start_label.setAlignment(QtCore.Qt.AlignCenter)
        self.start_label.setObjectName("start_label")
        self.Task_gridLayout.addWidget(self.start_label, 2, 0, 1, 1)
        self.point_AGV_comboBox = QtWidgets.QComboBox(self.Task_groupBox)
        self.point_AGV_comboBox.setMinimumSize(QtCore.QSize(0, 20))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.point_AGV_comboBox.setFont(font)
        self.point_AGV_comboBox.setAutoFillBackground(True)
        self.point_AGV_comboBox.setEditable(True)
        self.point_AGV_comboBox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContentsOnFirstShow)
        self.point_AGV_comboBox.setObjectName("point_AGV_comboBox")
        self.point_AGV_comboBox.addItem("")
        self.point_AGV_comboBox.addItem("")
        self.Task_gridLayout.addWidget(self.point_AGV_comboBox, 4, 1, 1, 1)
        self.point_AGV = QtWidgets.QLabel(self.Task_groupBox)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.point_AGV.setFont(font)
        self.point_AGV.setAlignment(QtCore.Qt.AlignCenter)
        self.point_AGV.setObjectName("point_AGV")
        self.Task_gridLayout.addWidget(self.point_AGV, 4, 0, 1, 1)
        self.verticalLayout_3.addLayout(self.Task_gridLayout)
        self.verticalLayout.addWidget(self.Task_groupBox)
        self.test_path_planing = QtWidgets.QGroupBox(self.Right_frame)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.test_path_planing.setFont(font)
        self.test_path_planing.setAlignment(QtCore.Qt.AlignBottom|QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft)
        self.test_path_planing.setObjectName("test_path_planing")
        self.gridLayout = QtWidgets.QGridLayout(self.test_path_planing)
        self.gridLayout.setObjectName("gridLayout")
        self.reset_Button = QtWidgets.QPushButton(self.test_path_planing)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.reset_Button.setFont(font)
        self.reset_Button.setObjectName("reset_Button")
        self.gridLayout.addWidget(self.reset_Button, 0, 0, 1, 2)
        self.random_Add_Cases = QtWidgets.QPushButton(self.test_path_planing)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.random_Add_Cases.setFont(font)
        self.random_Add_Cases.setObjectName("random_Add_Cases")
        self.gridLayout.addWidget(self.random_Add_Cases, 1, 0, 1, 2)
        self.Source_Button = QtWidgets.QPushButton(self.test_path_planing)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Source_Button.setFont(font)
        self.Source_Button.setObjectName("Source_Button")
        self.gridLayout.addWidget(self.Source_Button, 2, 0, 1, 1)
        self.source_spinBox = QtWidgets.QSpinBox(self.test_path_planing)
        self.source_spinBox.setMinimumSize(QtCore.QSize(0, 20))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.source_spinBox.setFont(font)
        self.source_spinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.source_spinBox.setMaximum(10000)
        self.source_spinBox.setObjectName("source_spinBox")
        self.gridLayout.addWidget(self.source_spinBox, 2, 1, 1, 1)
        self.Target_Button = QtWidgets.QPushButton(self.test_path_planing)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Target_Button.setFont(font)
        self.Target_Button.setObjectName("Target_Button")
        self.gridLayout.addWidget(self.Target_Button, 3, 0, 1, 1)
        self.target_spinBox = QtWidgets.QSpinBox(self.test_path_planing)
        self.target_spinBox.setMinimumSize(QtCore.QSize(0, 20))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.target_spinBox.setFont(font)
        self.target_spinBox.setAlignment(QtCore.Qt.AlignCenter)
        self.target_spinBox.setMaximum(10000)
        self.target_spinBox.setObjectName("target_spinBox")
        self.gridLayout.addWidget(self.target_spinBox, 3, 1, 1, 1)
        self.point_algorithm_Qlable = QtWidgets.QLabel(self.test_path_planing)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.point_algorithm_Qlable.setFont(font)
        self.point_algorithm_Qlable.setAlignment(QtCore.Qt.AlignCenter)
        self.point_algorithm_Qlable.setObjectName("point_algorithm_Qlable")
        self.gridLayout.addWidget(self.point_algorithm_Qlable, 4, 0, 1, 1)
        self.point_algorithm_comboBox = QtWidgets.QComboBox(self.test_path_planing)
        self.point_algorithm_comboBox.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.point_algorithm_comboBox.setFont(font)
        self.point_algorithm_comboBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.point_algorithm_comboBox.setAutoFillBackground(True)
        self.point_algorithm_comboBox.setEditable(True)
        self.point_algorithm_comboBox.setMaxVisibleItems(30)
        self.point_algorithm_comboBox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContentsOnFirstShow)
        self.point_algorithm_comboBox.setIconSize(QtCore.QSize(16, 20))
        self.point_algorithm_comboBox.setObjectName("point_algorithm_comboBox")
        self.point_algorithm_comboBox.addItem("")
        self.point_algorithm_comboBox.addItem("")
        self.point_algorithm_comboBox.addItem("")
        self.point_algorithm_comboBox.addItem("")
        self.point_algorithm_comboBox.addItem("")
        # self.point_algorithm_comboBox.addItem("")
        self.gridLayout.addWidget(self.point_algorithm_comboBox, 4, 1, 1, 1)
        self.heuristic_Qlable = QtWidgets.QLabel(self.test_path_planing)
        font = QtGui.QFont()
        font.setPointSize(13)
        self.heuristic_Qlable.setFont(font)
        self.heuristic_Qlable.setAlignment(QtCore.Qt.AlignCenter)
        self.heuristic_Qlable.setObjectName("heuristic_Qlable")
        self.gridLayout.addWidget(self.heuristic_Qlable, 5, 0, 1, 1)
        self.heuristic_ComboBox = QtWidgets.QComboBox(self.test_path_planing)
        self.heuristic_ComboBox.setMinimumSize(QtCore.QSize(0, 30))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.heuristic_ComboBox.setFont(font)
        self.heuristic_ComboBox.setAutoFillBackground(True)
        self.heuristic_ComboBox.setEditable(True)
        self.heuristic_ComboBox.setMaxVisibleItems(50)
        self.heuristic_ComboBox.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.heuristic_ComboBox.setIconSize(QtCore.QSize(16, 20))
        self.heuristic_ComboBox.setObjectName("heuristic_ComboBox")
        self.heuristic_ComboBox.addItem("")
        self.heuristic_ComboBox.addItem("")
        self.heuristic_ComboBox.addItem("")
        self.gridLayout.addWidget(self.heuristic_ComboBox, 5, 1, 1, 1)
        self.add_case = QtWidgets.QPushButton(self.test_path_planing)
        font = QtGui.QFont()
        font.setPointSize(14)
        self.add_case.setFont(font)
        self.add_case.setObjectName("add_case")
        self.gridLayout.addWidget(self.add_case, 6, 0, 1, 2)
        self.verticalLayout.addWidget(self.test_path_planing)
        self.verticalLayout.setStretch(0, 1)
        self.verticalLayout.setStretch(1, 1)
        self.horizontalLayout.addWidget(self.Right_frame)
        self.horizontalLayout.setStretch(0, 8)
        self.horizontalLayout.setStretch(1, 1)
        self.verticalLayout_5.addLayout(self.horizontalLayout)
        self.scrollArea = QtWidgets.QScrollArea(self.centralwidget)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 1149, 101))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.scrollAreaWidgetContents)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.textBrowser = QtWidgets.QTextBrowser(self.scrollAreaWidgetContents)
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayout_4.addWidget(self.textBrowser)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.verticalLayout_5.addWidget(self.scrollArea)
        self.verticalLayout_5.setStretch(0, 6)
        self.verticalLayout_5.setStretch(1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1151, 23))
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setObjectName("menu")
        MainWindow.setMenuBar(self.menubar)
        # self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setBaseSize(QtCore.QSize(0, 5))
        self.statusbar.setAutoFillBackground(True)
        self.statusbar.setInputMethodHints(QtCore.Qt.ImhTime)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.open = QtWidgets.QAction(MainWindow)
        self.open.setCheckable(False)
        self.open.setPriority(QtWidgets.QAction.HighPriority)
        self.open.setObjectName("open")
        self.Save = QtWidgets.QAction(MainWindow)
        self.Save.setObjectName("Save")
        self.menu.addAction(self.open)
        self.menu.addAction(self.Save)
        self.menubar.addAction(self.menu.menuAction())

        self.init_Canvas()
        self.init_Connect()

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        # 设置当前选项卡并使其获得焦点
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    #self.init_Canvas()
    #self.init_Connect()
    #初始化连接
    def init_Connect(self):
        self.statusbar.showMessage("ready")  # 状态栏显示信息

        self.Source_Button.clicked.connect(self.handle_Source_Button)
        self.Target_Button.clicked.connect(self.handle_Target_Button)
        self.random_Add_Cases.clicked.connect(self.handle_random_Add_Cases_button)
        self.add_case.clicked.connect(self.handle_add_case_button)
        self.random_AddTask.clicked.connect(self.handle_random_AddTask_button)
        self.addTask.clicked.connect(self.handle_addTask_button)
        self.random_addAGV.clicked.connect(self.handle_random_addAGV_button)
        self.addAGV.clicked.connect(self.handle_addAGV_button)
        self.point_AGV_comboBox.currentIndexChanged.connect(self.handle_point_AGV_comboBox)
        self.point_algorithm_comboBox.currentIndexChanged.connect(self.handle_point_algorithm_comboBox)
        self.reset_Button.clicked.connect(self.handle_reset_Button)

        # self.first_floor_canvas.mpl_connect('axes_enter_event', self.on_enter_event)
        # self.second_floor_canvas.mpl_connect('axes_enter_event', self.on_enter_event)
        # self.third_floor_canvas.mpl_connect('axes_enter_event', self.on_enter_event)
        # self.combined_floor_canvas.mpl_connect('axes_enter_event', self.on_enter_event)

        self.first_floor_canvas.mpl_connect('key_press_event', self.keyPressEvent)
        self.second_floor_canvas.mpl_connect('key_press_event', self.keyPressEvent)
        self.third_floor_canvas.mpl_connect('key_press_event', self.keyPressEvent)
        self.combined_floor_canvas.mpl_connect('key_press_event', self.keyPressEvent)
        self.first_floor.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.second_floor.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.third_floor.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.allMaps.setFocusPolicy(QtCore.Qt.ClickFocus)


    #初始化地图画布
    def init_Canvas(self):
        # self.first_floor.setFocusPolicy(QtCore.Qt.ClickFocus)   # 设置第一层地图获得焦点
        # self.second_floor.setFocusPolicy(QtCore.Qt.ClickFocus)  # 设置第二层地图获得焦点
        # self.third_floor.setFocusPolicy(QtCore.Qt.ClickFocus)   # 设置第三层地图获得焦点
        # self.allMaps.setFocusPolicy(QtCore.Qt.ClickFocus)      # 设置全景地图获得焦点

        self.first_floor_layout = QtWidgets.QVBoxLayout(self.first_floor)
        first_floor_toolbar = NavigationToolbar(self.first_floor_canvas, self.first_floor)
        self.first_floor_layout.addWidget(first_floor_toolbar)
        self.first_floor_layout.addWidget(self.first_floor_canvas)
        self.first_floor_layout.setContentsMargins(0, 0, 0, 0)
        self.first_floor_layout.setObjectName("first_floor_layout")
        self.first_floor_canvas.draw_floor()#画出第一层地图

        self.second_floor_layout = QtWidgets.QVBoxLayout(self.second_floor)
        second_floor_toolbar = NavigationToolbar(self.second_floor_canvas, self.second_floor)
        self.second_floor_layout.addWidget(second_floor_toolbar)
        self.second_floor_layout.addWidget(self.second_floor_canvas)
        self.second_floor_layout.setContentsMargins(0, 0, 0, 0)
        self.second_floor_layout.setObjectName("second_floor_layout")
        self.second_floor_canvas.draw_floor()#画出第二层地图

        self.third_floor_layout = QtWidgets.QVBoxLayout(self.third_floor)
        third_floor_toolbar = NavigationToolbar(self.third_floor_canvas, self.third_floor)
        self.third_floor_layout.addWidget(third_floor_toolbar)
        self.third_floor_layout.addWidget(self.third_floor_canvas)
        self.third_floor_layout.setContentsMargins(0, 0, 0, 0)
        self.third_floor_layout.setObjectName("third_floor_layout")
        self.third_floor_canvas.draw_floor()#画出第三层地图

        self.combined_graph_layout = QtWidgets.QVBoxLayout(self.allMaps)
        combined_floor_toolbar = NavigationToolbar(self.combined_floor_canvas, self.combined_floor_canvas)
        self.combined_graph_layout.addWidget(combined_floor_toolbar)
        self.combined_graph_layout.addWidget(self.combined_floor_canvas)
        self.combined_graph_layout.setContentsMargins(0, 0, 0, 0)
        self.combined_graph_layout.setObjectName("combined_graph_layout")
        # self.combined_floor_canvas.draw_floor()#画出全景地图

    def on_enter_event(self, event):
        widget = self.tabWidget.currentWidget()
        # widget.setFocusPolicy(QtCore.Qt.ClickFocus)
        print("on_enter_event",widget.objectName())

    def keyPressEvent(self, event):
        print("keyPressEvent",event.key)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "四向穿梭车货位优化与集成调度管理系统"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.first_floor), _translate("MainWindow", "第一层货位地图"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.second_floor), _translate("MainWindow", "第二层货位地图"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.third_floor), _translate("MainWindow", "第三层货位地图"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.allMaps), _translate("MainWindow", "全景地图"))
        self.AGV_groupBox.setTitle(_translate("MainWindow", "车辆管理"))
        self.AGV_ID.setText(_translate("MainWindow", "AGV_ID"))
        self.random_addAGV.setText(_translate("MainWindow", "随机添加AGV"))
        self.AGV_location.setText(_translate("MainWindow", "起始位置"))
        self.addAGV.setText(_translate("MainWindow", "添加AGV"))
        self.Task_groupBox.setTitle(_translate("MainWindow", "任务管理"))
        self.end_label.setText(_translate("MainWindow", "终点"))
        self.random_AddTask.setText(_translate("MainWindow", "随机添加任务"))
        self.addTask.setText(_translate("MainWindow", "添加任务"))
        self.start_label.setText(_translate("MainWindow", "起点"))
        self.point_AGV_comboBox.setItemText(0, _translate("MainWindow", "AGV1"))
        self.point_AGV_comboBox.setItemText(1, _translate("MainWindow", "AGV2"))
        self.point_AGV.setText(_translate("MainWindow", "指定AGV"))
        self.test_path_planing.setTitle(_translate("MainWindow", "测试路径算法"))
        self.reset_Button.setText(_translate("MainWindow", "重置地图"))
        self.random_Add_Cases.setText(_translate("MainWindow", "随机添加案例"))
        self.Source_Button.setText(_translate("MainWindow", "Source"))
        self.Target_Button.setText(_translate("MainWindow", "Target"))
        self.point_algorithm_Qlable.setText(_translate("MainWindow", "指定算法"))
        self.point_algorithm_comboBox.setCurrentText(_translate("MainWindow", "Dijkstra"))
        self.point_algorithm_comboBox.setItemText(0, _translate("MainWindow", "Dijkstra"))
        self.point_algorithm_comboBox.setItemText(1, _translate("MainWindow", "Astar"))
        self.point_algorithm_comboBox.setItemText(2, _translate("MainWindow", "双向Dijkstra"))
        self.point_algorithm_comboBox.setItemText(3, _translate("MainWindow", "ATL_star"))
        self.point_algorithm_comboBox.setItemText(4, _translate("MainWindow", "self_Astar"))
        self.heuristic_Qlable.setText(_translate("MainWindow", "启发函数"))
        self.heuristic_ComboBox.setCurrentText(_translate("MainWindow", "欧几里得"))
        self.heuristic_ComboBox.setItemText(0, _translate("MainWindow", "欧几里得"))
        self.heuristic_ComboBox.setItemText(1, _translate("MainWindow", "曼哈顿"))
        self.heuristic_ComboBox.setItemText(2, _translate("MainWindow", "切比雪夫"))
        self.add_case.setText(_translate("MainWindow", "测试案例"))
        self.menu.setTitle(_translate("MainWindow", "文件"))
        self.open.setText(_translate("MainWindow", "open"))
        self.Save.setText(_translate("MainWindow", "Save"))

    def handle_random_Add_Cases_button(self):
        print("随机添加案例")

    #测试路径算法的触发函数
    def handle_add_case_button(self):
        try:
            floor = self.maps[self.tabWidget.currentIndex()]         # 获取当前地图
            canvas = self.floor_Canvas_list[self.tabWidget.currentIndex()]  # 获取当前地图的canvas
            source = self.source_spinBox.value()
            target = self.target_spinBox.value()
            heuristic_index = self.heuristic_ComboBox.currentIndex()  # 获取启发函数索引
            heristic_name = self.heuristic_ComboBox.currentText()  # 获取启发函数名称
            algorithm_name = self.point_algorithm_comboBox.currentText()  # 获取算法名称
            algorithm_index = self.point_algorithm_comboBox.currentIndex()  # 获取算法索引
            # 获取当前日期和时间
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            take_time, path, explored, cost, turn_count = self.path_planing.Analyze_Path(floor, source, target, algorithm_index, heuristic_index)  # 运行路径算法
            canvas.show_visited_process(floor,explored)
            canvas.show_path(floor,path,algorithm_index)    # 显示路径
            log_message = (f"{current_time} - 路径算法测试案例：起点{source}, "
                           f"终点{target}, 算法：{algorithm_name},启发函数：{heristic_name}, "
                           f"路径：{path}，最短距离：{cost}, 耗时：{take_time}秒， 转向次数：{turn_count},探索节点数：{len(explored)}。")
                #将日志信息输出到文本框
            self.textBrowser.append(log_message)
        except Exception as e:
            self.textBrowser.append(f"{current_time} - 路径算法测试案例失败: {e}")  # 错误处理，输出失败原因

    def handle_random_AddTask_button(self):
        print("随机添加任务")

    def handle_addTask_button(self):
        print("添加任务")

    def handle_random_addAGV_button(self):
        print("随机添加AGV")

    def handle_addAGV_button(self):
        print("添加AGV")

    def handle_point_AGV_comboBox(self):
        print("指定AGV")

    def handle_point_algorithm_comboBox(self):
        # print("指定算法")
        pass
    def handle_Source_Button(self):
        # floor = self.maps[self.tabWidget.currentIndex()]         # 获取当前地图
        canvas = self.floor_Canvas_list[self.tabWidget.currentIndex()]  # 获取当前地图的canvas
        current_node = canvas.highlighted_node
        if current_node is not None:
            print(f"current_node :{current_node}")
            self.source_spinBox.setValue(current_node)
        else:
            self.source_spinBox.clear() # 清除原有值

    def handle_Target_Button(self):
        canvas = self.floor_Canvas_list[self.tabWidget.currentIndex()]  # 获取当前地图的canvas
        current_node = canvas.highlighted_node
        if current_node is not None:
            print(f"current_node :{current_node}")
            self.target_spinBox.setValue(current_node)
        else:
            self.target_spinBox.clear() # 清除原有值
    #重置地图
    def handle_reset_Button(self):
        canvas = self.floor_Canvas_list[self.tabWidget.currentIndex()]  # 获取当前地图的canvas
        canvas.reset_canvas()  # 重置地图

    def handle_open_button(self):
        print("open")

    def handle_Save_button(self):
        print("Save")
        pass








